
import { AlertEntity } from '../entities/Alert';
import { UserEntity } from '../entities/User';
import { UserRepository } from '../repositories/UserRepository';
import { TeamRepository } from '../repositories/TeamRepository';
import { deliveryStrategyFactory } from '../delivery/DeliveryStrategyFactory';
import { VisibilityType } from '../models/enums';
import { Notification } from '../models/Notification';
import { UserAlertStateRepository } from '../repositories/UserAlertStateRepository';
import { NotificationStatus } from '../models/enums';
import { User } from '../models/User';

export class NotificationService {
  private userRepository: UserRepository;
  private teamRepository: TeamRepository;
  private userAlertStateRepository: UserAlertStateRepository;

  constructor(
    userRepository: UserRepository,
    teamRepository: TeamRepository,
    userAlertStateRepository: UserAlertStateRepository
  ) {
    this.userRepository = userRepository;
    this.teamRepository = teamRepository;
    this.userAlertStateRepository = userAlertStateRepository;
  }

  public async processAlert(alert: AlertEntity): Promise<void> {
    const targetUsers = await this.getTargetUsers(alert);

    for (const user of targetUsers) {
      await this.sendNotification(alert, user);
    }
  }

  public async getTargetUsers(alert: AlertEntity): Promise<UserEntity[]> {
    switch (alert.visibility.type) {
      case VisibilityType.ORGANIZATION:
        return this.userRepository.findAll();
      case VisibilityType.TEAM:
        return this.userRepository.findByTeamId(alert.visibility.targetIds[0]);
      case VisibilityType.USER:
        return this.userRepository.findAllByIds(alert.visibility.targetIds);
      default:
        return [];
    }
  }

  public async sendNotification(alert: AlertEntity, user: UserEntity): Promise<void> {
    const deliveryStrategy = deliveryStrategyFactory.createStrategy(alert.deliveryType);
    const notification: Notification = {
      id: '', // This will be generated by the delivery strategy
      alertId: alert.id,
      userId: user.id,
      title: alert.title,
      message: alert.message,
      severity: alert.severity,
      deliveryType: alert.deliveryType,
      timestamp: new Date(),
      status: NotificationStatus.SENT,
    };
    
    deliveryStrategy.deliver(notification, user as User);
  }
}
